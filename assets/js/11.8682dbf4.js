(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{374:function(a,t,v){"use strict";v.r(t);var s=v(44),_=Object(s.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"双亲委派机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[a._v("#")]),a._v(" 双亲委派机制")]),a._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[a._v("简介")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("Java虚拟机对class文件采用的是"),v("code",[a._v("按需加载")]),a._v("的方式，也就是说当需要使用该类时才会将它的class文件加载到内存并生成的Class对象。")])]),a._v(" "),v("li",[v("p",[a._v("而且加载某个类的class文件时，java虚拟机采用的是双亲委派模式，即把请求交由"),v("code",[a._v("父类")]),a._v("处理，它是一种"),v("code",[a._v("任务委派")]),a._v("模式")])])])]),a._v(" "),v("h3",{attrs:{id:"工作原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[a._v("#")]),a._v(" 工作原理")]),a._v(" "),v("hr"),a._v(" "),v("ol",[v("li",[a._v("当类加载器接收到类加载请求时，不会马上自己加载，而会"),v("code",[a._v("委托")]),a._v("给父类加载器去执行")]),a._v(" "),v("li",[a._v("当父类加载器还有其父类加载器时，进一步向上委托，直到顶层类加载器（"),v("code",[a._v("引导类加载器")]),a._v("BootStrapClassLoader）")]),a._v(" "),v("li",[a._v("当父类加载器可以完成类加载任务，则成功返回，否则子类才可以尝试去加载")])]),a._v(" "),v("div",{attrs:{align:"center"}},[v("p",[v("img",{attrs:{src:"/myJavaDoc/jvm/class-loader-06.png",alt:"class-loader-parent"}})]),a._v(" "),v("p",[a._v("示意图")])]),a._v(" "),v("h3",{attrs:{id:"优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[a._v("#")]),a._v(" 优势")]),a._v(" "),v("hr"),a._v(" "),v("h4",{attrs:{id:"_1-避免类的重复加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-避免类的重复加载"}},[a._v("#")]),a._v(" 1. "),v("code",[a._v("避免")]),a._v("类的重复加载")]),a._v(" "),v("div",{attrs:{align:"center"}},[v("p",[v("img",{attrs:{src:"/myJavaDoc/jvm/class-loader-07.png",alt:"class-loader-parent"}})]),a._v(" "),v("p",[a._v("啥也不说了，上图")])]),a._v(" "),v("h4",{attrs:{id:"_2-保护程序安全，防止核心api被随意修改"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-保护程序安全，防止核心api被随意修改"}},[a._v("#")]),a._v(" 2. "),v("code",[a._v("保护")]),a._v("程序安全，防止核心API被随意修改")]),a._v(" "),v("ul",[v("li",[a._v("java虚拟机总是从最可信的Java核心Api中查找执行类，防止不可靠的类扮演被信任的类。")]),a._v(" "),v("li",[a._v("如上图所示，用户自己建的java.lang.String类是不会被加载的。")])]),a._v(" "),v("h4",{attrs:{id:"_3-保证核心api包的访问权限"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-保证核心api包的访问权限"}},[a._v("#")]),a._v(" 3. "),v("code",[a._v("保证")]),a._v("核心API包的访问权限")]),a._v(" "),v("ul",[v("li",[a._v("java虚拟机保证核心api的访问权限。")]),a._v(" "),v("li",[a._v("如下图所示，java.lang包需要访问权限，阻止我们用包名自定义类。")])]),a._v(" "),v("div",{attrs:{align:"center"}},[v("p",[v("img",{attrs:{src:"/myJavaDoc/jvm/class-loader-08.png",alt:"class-loader-parent"}})]),a._v(" "),v("p",[a._v("继续上图")])])])}),[],!1,null,null,null);t.default=_.exports}}]);