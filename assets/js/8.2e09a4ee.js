(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{376:function(v,_,i){"use strict";i.r(_);var a=i(44),t=Object(a.a)({},(function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h1",{attrs:{id:"类加载过程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[v._v("#")]),v._v(" 类加载过程")]),v._v(" "),i("div",{attrs:{align:"center"}},[i("p",[i("img",{attrs:{src:"/myJavaDoc/jvm/class-loader-01.png",alt:"class-loader-process"}})])]),v._v(" "),i("h3",{attrs:{id:"加载模块（loading）"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#加载模块（loading）"}},[v._v("#")]),v._v(" 加载模块（loading）")]),v._v(" "),i("ol",[i("li",[v._v("通过一个类的全限定名获取定义此类的二进制字节流。")]),v._v(" "),i("li",[v._v("将这个字节流所代表的静态存储结构转换为"),i("code",[v._v("方法区")]),v._v("中的运行时数据。")]),v._v(" "),i("li",[v._v("在内存那种生成一个代表这个类的Class对象，作为方法区这个类的数据访问入口。")])]),v._v(" "),i("h3",{attrs:{id:"链接模块（linking）"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#链接模块（linking）"}},[v._v("#")]),v._v(" 链接模块（linking）")]),v._v(" "),i("p",[i("em",[i("strong",[v._v("一. 校验")])])]),v._v(" "),i("ol",[i("li",[v._v("为了确保Class文件的字节流中包含了符合"),i("code",[v._v("当前虚拟机")]),v._v("要求的信息，保证类的正确性，不会"),i("code",[v._v("危害")]),v._v("虚拟机的自身安全。")]),v._v(" "),i("li",[v._v("主要包含四种：文件格式校验，源数据校验，字节码校验，符号引用校验。")]),v._v(" "),i("li",[v._v("例如所有字节码文件"),i("code",[v._v("固定")]),v._v("的前四个字节的魔术：CA FE BA BE (咖啡宝贝)")])]),v._v(" "),i("p",[i("em",[i("strong",[v._v("二. 准备")])])]),v._v(" "),i("ol",[i("li",[v._v("为"),i("code",[v._v("类变量")]),v._v("分配内存并设置"),i("code",[v._v("零值")]),v._v("(默认初始值，int->0，boolean->false)")]),v._v(" "),i("li",[i("code",[v._v("不包含")]),v._v("final定义的static变量，因为final定义的变量在编译时就分配了，在初始化阶段显示赋值。")]),v._v(" "),i("li",[i("code",[v._v("不包含")]),v._v("实例变量，实例变量会跟随对象的创建分配到堆中")])]),v._v(" "),i("p",[i("em",[i("strong",[v._v("三. 解析")])])]),v._v(" "),i("ol",[i("li",[v._v("将"),i("code",[v._v("常量池")]),v._v("中的"),i("code",[v._v("符号引用")]),v._v("转换成"),i("code",[v._v("直接引用")]),v._v("的过程。")]),v._v(" "),i("li",[v._v("符号引用：一组符号来描述所引用的目标。\n直接引用：直接指向目标的指针，偏移量或间接定位到目标的句柄")])]),v._v(" "),i("h3",{attrs:{id:"初始化阶段（initialization）"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段（initialization）"}},[v._v("#")]),v._v(" 初始化阶段（Initialization）")]),v._v(" "),i("ol",[i("li",[v._v("执行"),i("code",[v._v("类构造器方法clinit()")]),v._v("（class or interface initialization method）的过程。")]),v._v(" "),i("li",[v._v("类构造器方法 "),i("code",[v._v("不是")]),v._v("指 构造器init()。")]),v._v(" "),i("li",[v._v("类构造器方法是由javac编译器"),i("code",[v._v("自动收集")]),v._v("类中所有"),i("code",[v._v("类变量")]),v._v("的赋值动作和"),i("code",[v._v("静态代码块")]),v._v("中的语句。")]),v._v(" "),i("li",[v._v("顺序：按语句在源文件中出现的顺序")]),v._v(" "),i("li",[v._v("虚拟机会保证一个类的clinit()方法被同步加锁（"),i("code",[v._v("仅能执行一次")]),v._v("）")]),v._v(" "),i("li",[v._v("不一定会有clinit()方法！")])]),v._v(" "),i("div",{attrs:{align:"center"}},[i("p",[i("img",{attrs:{src:"/myJavaDoc/jvm/class-loader-02.png",alt:"class-loader-process"}})])])])}),[],!1,null,null,null);_.default=t.exports}}]);